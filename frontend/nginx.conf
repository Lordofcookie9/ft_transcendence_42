upstream backend_upstream {
    server backend:3000;
    keepalive 32;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

server {
    # keep HTTP/1.1 available for WebSocket handshakes
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/cert/cert.pem;
    ssl_certificate_key /etc/nginx/cert/key.pem;

    client_max_body_size 25m;

    # --- API (REST) ---
    location /api/ {
        proxy_pass http://backend_upstream;
        proxy_http_version 1.1;
        proxy_redirect off;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;

        # forward original URI too
        proxy_set_header X-Original-URL    $request_uri;
        proxy_set_header X-Forwarded-Uri   $request_uri;
        proxy_set_header X-Request-URI     $request_uri;
    }

    # --- Uploads (served by backend) ---
    location /uploads/ {
        proxy_pass http://backend_upstream;
        proxy_http_version 1.1;
        proxy_redirect off;

        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;

        proxy_set_header X-Original-URL    $request_uri;
        proxy_set_header X-Forwarded-Uri   $request_uri;
        proxy_set_header X-Request-URI     $request_uri;
    }

    # --- WebSockets (/ws/...) ---
        location /ws/ {
        proxy_pass http://backend_upstream;
        proxy_http_version 1.1;

        proxy_set_header Upgrade             $http_upgrade;
        proxy_set_header Connection          $connection_upgrade;
        proxy_read_timeout                   1h;
        proxy_send_timeout                   1h;
        proxy_buffering                      off;
        proxy_redirect                       off;

        # preserve original target explicitly (you already have these)
        proxy_set_header X-Original-URL      $request_uri;
        proxy_set_header X-Forwarded-Uri     $request_uri;
        proxy_set_header X-Request-URI       $request_uri;

        # keep host/proto for logs & absolute URL generation (you already have these)
        proxy_set_header Host                $host;
        proxy_set_header X-Forwarded-Host    $host;
        proxy_set_header X-Forwarded-Proto   $scheme;
        proxy_set_header X-Forwarded-Port    $server_port;
        proxy_set_header X-Real-IP           $remote_addr;

        # ðŸ‘‡ **required so the backend can read your subprotocol**
        proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;

        # (optional) forward extensions too
        # proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
    }


    # --- Static compiled assets ---
    location /compiled/ {
        alias /usr/share/nginx/html/compiled/;
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        access_log off;
    }

    # --- SPA fallback ---
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
    }
}
