services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: transcendance_backend
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./db:/app/db
    expose:
      - "3000"
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: transcendance_frontend
    ports:
      - "443:443"
    volumes:
      - ./cert:/etc/nginx/cert
    depends_on:
      - backend
      - grafana
      - prometheus
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus 
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network
    depends_on:
      - backend
      - node_exporter
      - alertmanager

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=${GF_AUTH_ANONYMOUS_ENABLED}
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PW}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
      - GF_SERVER_ROOT_URL=https://localhost/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_LOG_LEVEL=warn
      - GF_PROVISIONING_FORCE_UPDATE=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - app-network
    depends_on:
      - prometheus

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    networks:
      - app-network
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    networks:
      - app-network

volumes:
  prometheus-data:
    name: prometheus_data
  grafana-data:
    name: grafana-data

networks:
  app-network:
    driver: bridge